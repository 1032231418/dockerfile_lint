#!/usr/bin/env node

'use strict';

var fs = require('fs'),
    util = require('util'),
    path = require('path'),
    commandline = require('commander'),
    logger = require("../lib/logger"),
    config = require('../config/config'),
    yamlParser = require('js-yaml'),
    loadRules = require("../lib/rulefile-loader").load,
    DockeFileValidator = require('../'),
    printResults = require('./functions').printResults,
    printJsonResults = require('./functions').printJsonResults;

var dockerfileLocation = null;
var rulefileLocation = null;
var dockerfile = null ;
var rulefile = null ;
var printJson = false;
var remoteFile = false;
var strictMode = true;


commandline.option('-j, --json', 'Show results in JSON format')
    .option('-r, --rulefile [rulefile] (optional)', 'Rule file', rulefile)
    .option('-f, --dockerfile [dockerfile] (required)', 'File to lint. Accepts a local file or an http(s) URL', dockerfile)
    .option('-v, --verbose', 'Show debugging logs')
    .option('-p, --permissive', 'Run in permissive mode (return 1 only on error but not on warning)')
    .option('-e, --export-rules', 'Dump the effective rule file. All other options except -r are ignored.')
    .parse(process.argv);

if (commandline.verbose) {
    if (logger.transports.console) logger.transports.console.level = 'debug';
    if (logger.transports.file) logger.transports.file.level = 'debug';
}

if (commandline.json) {
    printJson = true;
}

if (!commandline.dockerfile && !commandline.exportRules) {
    commandline.help();
}

if (commandline.rulefile) {
    rulefileLocation = commandline.rulefile;
}

if (rulefileLocation !== null) {
    if (!fs.existsSync(rulefileLocation)) {
        console.error('ERROR: Rule file not found -> ' + rulefileLocation);
        process.exit(1);
    }
}

if (commandline.exportRules) {
    var rules = loadRules(rulefileLocation);
    console.log(yamlParser.dump(rules));
    process.exit(0);
}

if (commandline.permissive) {
    strictMode = false;
}

dockerfileLocation = commandline.dockerfile;


try {
    dockerfile = fs.readFileSync(dockerfileLocation, 'UTF-8');
} catch (e) {
    if (/^http[s]?:\/\//.test(dockerfileLocation)) {
        remoteFile = true;
    } else {
        console.error('ERROR: Dockerfile not found -> ' + dockerfileLocation);
        process.exit(1);
    }
}


function runValidation(dockerfile, rulefileLocation) {
    var validator = new DockeFileValidator(rulefileLocation);
    var results = validator.validate(dockerfile);
    if (printJson) {
        printJsonResults(results);
    } else {
        printResults(results);
    }

    if ((results.error.count > 0) || (strictMode && results.warn.count > 0)) {
        process.exit(1);
    } else {
        process.exit(0);
    }
}

if (remoteFile) {
    downloadDockerfile(dockerfileLocation, function (dockerfile) {
        runValidation(dockerfile, rulefileLocation);
    });
} else {
    runValidation(dockerfile, rulefileLocation);
}

